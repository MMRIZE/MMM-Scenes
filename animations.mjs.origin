const Animation = {
  'default': ({ moduleWrapper, duration, isHide }) => {
    return new Promise((resolve, reject) => {
      moduleWrapper.style.transition = 'opacity ' + duration / 1000 + 's'
      moduleWrapper.style.opacity = (isHide) ? 0 : 1
      setTimeout(() => {
        resolve()
      }, duration)
    })
  },

  'pageLeft': ({ moduleWrapper, duration, isHide }) => {
    return new Promise((resolve, reject) => {
      let keyframe = (isHide) ? [
        { ttansform: 'translateX(0)', opacity: 1 },
        { transform: 'translateX(-50vw)', opacity: 0 }
      ] : [
        { transform: 'translateX(50vw)', opacity: 0 },
        { transform: 'translateX(0)', opacity: 1 }
      ]
      moduleWrapper.animate(keyframe, { duration }).onfinish = resolve
    })
  },

  'pageRight': ({ moduleWrapper, duration, isHide }) => {
    return new Promise((resolve, reject) => {
      let keyframe = (isHide) ? [
        { transform: 'translateX(0)', opacity: 1 },
        { transform: 'translateX(50vw)', opacity: 0 }
      ] : [
        { transform: 'translateX(-50vw)', opacity: 0 },
        { transform: 'translateX(0)', opacity: 1 }
      ]
      moduleWrapper.animate(keyframe, { duration }).onfinish = resolve
    })
  },

  'pageUp': ({ moduleWrapper, duration, isHide }) => {
    return new Promise((resolve, reject) => {
      let keyframe = (isHide) ? [
        { transform: 'translateY(0)', opacity: 1 },
        { transform: 'translateY(-50vh)', opacity: 0 }
      ] : [
        { transform: 'translateY(50vh)', opacity: 0 },
        { transform: 'translateY(0)', opacity: 1 }
      ]
      moduleWrapper.animate(keyframe, { duration }).onfinish = resolve
    })
  },

  'pageDown': ({ moduleWrapper, duration, isHide }) => {
    return new Promise((resolve, reject) => {
      let keyframe = (isHide) ? [
        { transform: 'translateY(0)', opacity: 1 },
        { transform: 'translateY(50vh)', opacity: 0 }
      ] : [
        { transform: 'translateY(-50vh)', opacity: 0 },
        { transform: 'translateY(0)', opacity: 1 }
      ]
      moduleWrapper.animate(keyframe, { duration }).onfinish = resolve
    })
  },

  'dismissOut': ({ moduleWrapper, duration, module }) => {
    const position = (pos) => {
      if (pos.search("_left") >= 0) return "(-50vw, 0)";
      if (pos.search("_right") >= 0) return "(50vw, 0)";
      if (pos.search("top_bar") >= 0 || pos.search("upper") >= 0 || pos.search("middle") >= 0) return "(0, 50vh)";
      if (pos.search("bottom_bar") >= 0 || pos.search("lower") >= 0) return "(0, 50vh)";
      return "(0,0)";
    };
    const value = position(module.data.position)
    let keyframe = [
      { transform: 'translate(0, 0)', easing: 'ease-out'},
      { transform: `translate${value}`, easing: 'ease-in' },
    ];
    return new Promise((resolve, reject) => {
      moduleWrapper.animate(keyframe, { duration }).onfinish = resolve
    })
  },

  'jelly': ({ moduleWrapper, duration, module, isHide }) => {
    let keyframe = [
      { transform: `scale(2, 0.5)`, opacity: (isHide) ? 1 : 0},
      { transform: `scale(0.5, 1.5)`},
      { transform: `scale(1.4, 0.6)`},
      { transform: `scale(0.7, 1.3)`},
      { transform: `scale(1.2, 0.8)`},
      { transform: `scale(0.9, 1.1)`},
      { transform: 'scale(1, 1)', opacity: (isHide) ? 0 : 1 },
    ];
    return new Promise((resolve, reject) => {
      try {
        moduleWrapper.animate(keyframe, { duration }).onfinish = resolve
      } catch (e) {
        reject(e)
      }
    })
  },

}

export { Animation }